#!/bin/bash

# Copyright 2011 MIT Haystack Observatory
# 
# This file is part of Mark6.
# 
# Mark6 is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 2 of the License.
# 
# Mark6 is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Mark6.  If not, see <http://www.gnu.org/licenses/>.

export LD_LIBRARY_PATH=/opt/mit/mark6/lib

# Globals
EXEC=/opt/mit/mark6/bin/net2disk
ETHTOOL=/sbin/ethtool
BLOCKDEV=/sbin/blockdev

# Configure ethernet drivers
${ETHTOOL} -K eth2 gro on
${ETHTOOL} -K eth3 gro on
${ETHTOOL} -K eth4 gro on
${ETHTOOL} -K eth5 gro on

# Offload parameters for eth2:
# rx-checksumming: on
# tx-checksumming: on
# scatter-gather: on
# tcp-segmentation-offload: on
# udp-fragmentation-offload: off
# generic-segmentation-offload: on
# generic-receive-offload: off
# large-receive-offload: on
# ntuple-filters: off
# receive-hashing: off

# RAID settings
${BLOCKDEV} --setra 16384 /dev/sda
${BLOCKDEV} --setra 16384 /dev/sdb
${BLOCKDEV} --setra 16384 /dev/sdc
${BLOCKDEV} --setra 16384 /dev/sdd

echo deadline > /sys/block/sda/queue/scheduler
echo deadline > /sys/block/sdb/queue/scheduler
echo deadline > /sys/block/sdc/queue/scheduler
echo deadline > /sys/block/sdd/queue/scheduler

echo 512 > /sys/block/sda/queue/nr_requests
echo 512 > /sys/block/sdb/queue/nr_requests
echo 512 > /sys/block/sdc/queue/nr_requests
echo 512 > /sys/block/sdd/queue/nr_requests

# /etc/modules
# pf_ring transparent_mode=0 min_num_slots=4096 enable_ip_defrag=1

# IRQ "MAP"

ETH2_IRQ=`cat /proc/interrupts | grep eth2 | awk -F: '{ print $1; }' \
		| awk '{ print $1; }'`
ETH3_IRQ=`cat /proc/interrupts | grep eth3 | awk -F: '{ print $1; }' \
		| awk '{ print $1; }'`
ETH4_IRQ=`cat /proc/interrupts | grep eth4 | awk -F: '{ print $1; }' \
		| awk '{ print $1; }'`
ETH5_IRQ=`cat /proc/interrupts | grep eth5 | awk -F: '{ print $1; }' \
		| awk '{ print $1; }'`
MEGASAS1_IRQ=24
MEGASAS2_IRQ=35

WRITE_BLOCKS=2048
# WRITE_BLOCKS=1024
# WRITE_BLOCKS=2048

# Setup IRQ AFFINITY (echoing a CPU mask to set affinity)
echo 1 > /proc/irq/${ETH2_IRQ}/smp_affinity
echo cat /proc/irq/${ETH2_IRQ}/smp_affinity

echo 1 > /proc/irq/${ETH3_IRQ}/smp_affinity
echo cat /proc/irq/${ETH3_IRQ}/smp_affinity

echo 4 > /proc/irq/${ETH4_IRQ}/smp_affinity
echo cat /proc/irq/${ETH4_IRQ}/smp_affinity

echo 4 > /proc/irq/${ETH5_IRQ}/smp_affinity
echo cat /proc/irq/${ETH5_IRQ}/smp_affinity

# CPU0
echo 1 > /proc/irq/${MEGASAS1_IRQ}/smp_affinity
echo cat /proc/irq/${MEGASAS1_IRQ}/smp_affinity

# CPU2
echo 4 > /proc/irq/${MEGASAS2_IRQ}/smp_affinity
echo cat /proc/irq/${MEGASAS2_IRQ}/smp_affinity

# Run! 
# Note that SMP affinities are ordinals (not mask). CPU numbering from 0.
for m in disk0 disk1 disk2 disk3
do
	fallocate -l 30G /mnt/${m}/${m}.m6
done

${EXEC} \
    --interfaces \
	eth2 \
	eth3 \
	eth4 \
	eth5 \
    --capture_files \
	/mnt/disk0/disk0.m6 \
	/mnt/disk1/disk1.m6 \
	/mnt/disk2/disk2.m6 \
	/mnt/disk3/disk3.m6 \
    --smp_affinities \
	1 \
	1 \
	3 \
	3 \
    --write_blocks ${WRITE_BLOCKS} \
    --snaplen 8266

    # --capture_files /mnt/disk0/cap.m6 /mnt/disk1/cap.m6 /mnt/disk2/cap.m6 /mnt/disk3/cap.m6 \
    # --interfaces eth2 eth3 eth4 eth5 \
    # --capture_files /mnt/disk0/cap.m6 /mnt/disk1/cap.m6 /mnt/disk2/cap.m6 /mnt/disk3/cap.m6 \
    # --capture_files /mnt/disk0/cap.m6 /mnt/disk1/cap.m6 /mnt/disk2/cap.m6 /mnt/disk3/cap.m6 \
    # --capture_files /mnt/disk0/cap.m6 /mnt/disk1/cap.m6 /mnt/disk2/cap.m6 /mnt/disk3/cap.m6 \
