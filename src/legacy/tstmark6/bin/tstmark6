#!/usr/bin/env escript

%% Copyright 2011 MIT Haystack Observatory
%% 
%% This file is part of Mark6.
%% 
%% Mark6 is free software: you can redistribute it and/or modify
%% it under the terms of the GNU General Public License as published by
%% the Free Software Foundation, version 2 of the License.
%% 
%% Mark6 is distributed in the hope that it will be useful,
%% but WITHOUT ANY WARRANTY; without even the implied warranty of
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%% GNU General Public License for more details.
%% 
%% You should have received a copy of the GNU General Public License
%% along with Mark6.  If not, see <http://www.gnu.org/licenses/>.

%%%-------------------------------------------------------------------
%%% @author David <dlapsley@lib1-lt.haystack.mit.edu>
%%% @copyright (C) 2011, MIT Haystack Observatory
%%% @doc
%%% Connects to X3C logger via TCP and is responsible for transmitting
%%% commands and receiving the response to those commands and passing
%%% them back.
%%% @end
%%% Created : 29 Mar 2011 by David <dlapsley@lib1-lt.haystack.mit.edu>
%%%-------------------------------------------------------------------
-author("dlapsley@haystack.mit.edu").
-include_lib("xmerl/include/xmerl.hrl").
-mode(compile).

%%%-------------------------------------------------------------------
%% Defines
%%%-------------------------------------------------------------------

%% M6 Server.
-define(DEFAULT_BLOCK_SIZE, 1024).

%% Xcube connectivity.
-define(DEFAULT_HOST, "127.0.0.1").
-define(DEFAULT_PORT, 6050).
-define(DEFAULT_RCV_TO, 1000).
-define(DEFAULT_CONNECT_RETRIES, 5).

-define(TCP_OPTIONS,[list,{packet, 0},{active, false},{reuseaddr, true}]).

-define(XML_PROLOG, "").
-define(XML_PRETTY_PRINTING, true).

%% Enable/disable eunit tests.
-define(NOTEST, false).

%% Eunit commands.
-define(TEST_TIMEOUT_MS, 20000).
-define(INTER_COMMAND_DELAY_MS, 500).
-define(SETTLING_DELAY_MS, 500).

%% Useful constants.
-define(HLINE, "------------------------------------------------------------------------------").

trim_whitespace(Input) ->
    LS = re:replace(Input, "^[ \\t\\n]*", "", [{return, list}]),
    RS = re:replace(LS, "[ \\t\\n]*$", "", [{return, list}]),
    RS.

main([]) ->	
    Test = false,
    io:format(?HLINE ++ "\n"),
    io:format("Mark6 CLI~n", []),
    io:format("Copyright 2011 MIT Haystack Observatory~n", []),
    io:format("del@haystack.mit.edu~n~n", []),
    io:format("Type 'quit;' to exit CLI...~n", []),
    io:format(?HLINE ++ "\n"),
    case gen_tcp:connect(?DEFAULT_HOST, ?DEFAULT_PORT,
			 ?TCP_OPTIONS) of
    	{ok, Sock} ->
	    io:format("Connected to server...~n"),
	    loop(Sock, Test);
	{error, Reason} ->
	    error_logger:warn_msg("Error connecting to server: ~w~n",
				  [ Reason ]);
	_ ->
	    error_logger:warn_msg("Unknown error connecting to server~n")
    end.

loop(Sock, Test) ->
    case io:get_line("mark6>") of
	eof ->
	    error_logger:info_msg("Done");
	{error, Reason } ->
	    error_logger:info_msg("Error parsing command: ~w~n",
				  [ Reason ]);
	Cmd ->
	    Cleaned_cmd = string:to_lower(trim_whitespace(Cmd)),
	    case string:equal(Cleaned_cmd, "quit;") of
		true ->
		    error_logger:info_msg("Quitting...");
		false ->
		    gen_tcp:send(Sock, Cleaned_cmd),
		    Response = get_response(Sock, []),
		    Response_lines = string:tokens(Response, "\n"),
		    lists:map(fun(X) ->
				      io:format("~s~n", [X])
			      end, Response_lines),
		    loop(Sock, Test)
	    end	
    end.

get_response(Sock, List) ->
    case gen_tcp:recv(Sock, 1) of
	{ok, ";"} ->
	    lists:concat(lists:reverse([ ";" | List]));
	{ok, Char} ->
	    get_response(Sock, [Char|List]);
	Error ->
	    error_logger:info_msg("R: ~p~n", [Error])
    end.
